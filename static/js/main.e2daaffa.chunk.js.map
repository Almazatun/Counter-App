{"version":3,"sources":["components/button/button.module.css","components/button/button.tsx","components/settings/settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","style","Style","height","width","borderRadius","outline","fontSize","disabled","disable","onClick","title","Settings","useState","startValue","setStartValue","maxValue","setMaxValue","step","setStep","useEffect","initialStartValue","Number","localStorage","getItem","initialMaxtValue","initialSteptValue","statusStartValue","statusMaxValue","setStepValue","setDisabled","setCount","buttonStyle","backgroundColor","display","justifyContent","alignItems","margin","border","inputStyleMinus","marginLeft","BasicTernaryStyle","DisabledButtonTernary","type","onChange","event","newMaxValue","parseInt","currentTarget","value","newStartValue","newSteptValue","min","setItem","JSON","stringify","App","setValue","count","dis","setDis","Max","IncorrectValue","color","BasicView","isDisabled","Disabled","BooleanForSetButton","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,SAAW,2B,wLCU9CC,EAAgC,SAACC,GAU1C,OACI,4BAAQC,UAAWC,IAAMC,MAAOD,MAVvB,CACTE,OAAQ,OACRC,MAAO,OACPC,aAAc,OACdC,QAAS,OACTC,SAAU,OAKqCC,SAAUT,EAAMU,QAASC,QAASX,EAAMW,SAAUX,EAAMY,QCRlGC,EAAkD,SAACb,GAAyB,IAAD,EAGlDc,mBAAiB,GAHiC,mBAG/EC,EAH+E,KAGnEC,EAHmE,OAItDF,mBAAiB,GAJqC,mBAI/EG,EAJ+E,KAIrEC,EAJqE,OAK9DJ,mBAAiB,GAL6C,mBAK/EK,EAL+E,KAKzEC,EALyE,KAuBpFC,qBAAU,WAEN,IAAMC,EAAoBC,OAAOC,aAAaC,QAAQ,eACtDT,EAAcM,GACd,IAAMI,EAAmBH,OAAOC,aAAaC,QAAQ,aACrDP,EAAYQ,GACZ,IAAMC,EAAoBJ,OAAOC,aAAaC,QAAQ,SACtDL,EAAQO,GACR3B,EAAM4B,iBAAiBN,GACvBtB,EAAM6B,eAAeH,GACrB1B,EAAM8B,aAAaH,GACnB3B,EAAM+B,aAAY,GAClB/B,EAAMgC,SAASV,KAEhB,IAEH,IAeIW,EAAc,CACd5B,MAAO,QACPD,OAAQ,QACR8B,gBAAiB,OACjB5B,aAAc,OACd6B,QAAS,OACTC,eAAgB,eAChBC,WAAY,SACZC,OAAQ,OACRC,OAAQ,kBACR/B,SAAU,OAmBVgC,EAAkB,CAClBpC,OAAQ,MACRC,MAAO,OACPC,aAAc,OACd4B,gBAAiB,MACjBO,WAAY,OACZjC,SAAU,OAGVkC,EAAoB3B,EAAa,GAC/BA,IAAeE,GACXF,EAAaE,EAFkBuB,EAzBxB,CACbpC,OAAQ,MACRC,MAAO,OACPC,aAAc,OACd4B,gBAAiB,QACjBO,WAAY,OACZjC,SAAU,OAwBVmC,EAAwB5B,EAAa,IACnCA,IAAeE,GACXF,EAAaE,GAIvB,OACI,yBAAKf,MAtDO,CACZqC,OAAQ,mBACRjC,aAAc,SAqDV,yBAAKJ,MAAO+B,EAAatB,QAAS,kBAAMX,EAAM+B,aAAY,KACtD,2CAEI,2BAAO7B,MAAOwC,EACPE,KAAK,SACLzB,KAAMA,EACN0B,SAnGE,SAACC,GACtB,IAAIC,EAAcC,SAASF,EAAMG,cAAcC,OAC/ClD,EAAM6B,eAAekB,GACrB7B,EAAY6B,IAiGOG,MAAOjC,KAGlB,6CAEI,2BAAOf,MAAOwC,EACPE,KAAK,SACLC,SAhHD,SAACC,GACnB,IAAIK,EAAgBH,SAASF,EAAMG,cAAcC,OACjDlC,EAAcmC,GACdnD,EAAM4B,iBAAiBuB,IA8GJhC,KAAMA,EACN+B,MAAOnC,KAGlB,4CAEI,2BAAOb,MAnDF,CACjBE,OAAQ,MACRC,MAAO,OACPC,aAAc,OACd4B,gBAAiB,SACjBO,WAAY,OACZjC,SAAU,OA8CSoC,KAAK,SACLC,SA/GG,SAACC,GACvB,IAAIM,EAAgBJ,SAASF,EAAMG,cAAcC,OACjDlD,EAAM8B,aAAasB,GACnBhC,EAAQgC,IA6GWF,MAAO/B,EACPkC,IAAK,MAIpB,yBAAKnD,MAAO+B,GACR,kBAAC,EAAD,CAAQrB,MAAOZ,EAAMY,MAAOD,QAhGrB,WAEfa,aAAa8B,QAAQ,aAAcC,KAAKC,UAAUzC,IAClDS,aAAa8B,QAAQ,WAAYC,KAAKC,UAAUvC,IAChDO,aAAa8B,QAAQ,OAAQC,KAAKC,UAAUrC,IAE5CnB,EAAM+B,aAAY,GAClB/B,EAAMgC,SAASjB,IAyF0CL,QAASiC,OC/I7Dc,EAAgB,WAAO,IAAD,EAEP3C,mBAAiB,GAFV,mBAE1BoC,EAF0B,KAEnBQ,EAFmB,OAGP5C,mBAAiB,GAHV,mBAG1B6C,EAH0B,KAGnB3B,EAHmB,OAIDlB,mBAAiB,GAJhB,mBAI1BG,EAJ0B,KAIhBC,EAJgB,OAKTJ,mBAAiB,GALR,mBAK1BK,EAL0B,KAKpBC,EALoB,OAMXN,oBAAkB,GANP,mBAM1B8C,EAN0B,KAMrBC,EANqB,KAsB3BC,EAAc7C,EAmBdgB,EAAc,CACd5B,MAAO,QACPD,OAAQ,QACR8B,gBAAiB,OACjB5B,aAAc,OACd6B,QAAS,OACTC,eAAgB,eAChBC,WAAY,SACZC,OAAQ,OACRC,OAAQ,kBACR/B,SAAU,OAgBVuD,EAAiB,CAClBC,MAAO,OASNC,EAAYL,EALAV,EAAQ,GAClBA,IAAUjC,GACNiC,EAAQjC,EAFU,yBAAKf,MAAO6D,GAAZ,mBAGf,4DAGCJ,EAEVO,EAAaP,IAAUG,KACrBF,EAGFO,EAAWR,IAAUG,EAEzB,OACI,yBAAK7D,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,EAAD,CACIW,MAAO,MAEPgB,iBApFS,SAACsB,GACtBQ,EAASR,IAoFGrB,eAlFO,SAACqB,GACpBhC,EAAYgC,IAkFAnB,YA/EI,SAACe,GACjBe,EAAOf,IA+EKsB,oBAAqBR,EACrB5B,SAAUA,EACVF,aA/EK,SAACgB,GAClB1B,EAAQ0B,MAkFA,yBAAK5C,MAjED,CACZqC,OAAQ,mBACRjC,aAAc,OACdmC,WAAY,SA+DA,yBAAKvC,MAAOyD,IAAUG,EAhDnB,CACfzD,MAAO,QACPD,OAAQ,QACR8B,gBAAiB,uBACjB5B,aAAc,OACd6B,QAAS,OACTC,eAAgB,eAChBC,WAAY,SACZC,OAAQ,OACRC,OAAQ,kBACR/B,SAAU,OAsC6CyB,GAAegC,GAC1D,yBAAK/D,MAAO+B,GACR,kBAAC,EAAD,CAAQrB,MAAO,MACPD,QAhFZ,WACRgD,EAAQ1C,GAERe,EADe2B,EAAQxC,IA+EHT,QAASwD,IAEjB,kBAAC,EAAD,CAAQtD,MAAO,QACPD,QA7EL,WACnBqB,EAASkB,IA6EexC,QAASyD,SCxGrBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2daaffa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Style\":\"button_Style__2OXAj\",\"disabled\":\"button_disabled__1k3Uk\"};","import React from \"react\";\r\nimport style from \"./button.module.css\"\r\n\r\ntype ButtonType = {\r\n title: string\r\n    onClick: () => void\r\n    disable: boolean\r\n\r\n\r\n}\r\n\r\nexport const Button: React.FC <ButtonType> = (props:ButtonType) => {\r\n    let button = {\r\n        height: \"auto\",\r\n        width: \"auto\",\r\n        borderRadius: \"10px\",\r\n        outline: \"none\",\r\n        fontSize: \"4vh\",\r\n    }\r\n\r\n\r\n    return (\r\n        <button className={style.Style} style={button} disabled={props.disable} onClick={props.onClick}>{props.title}</button>\r\n    )\r\n\r\n}","import React, {ChangeEvent, Dispatch, SetStateAction, useEffect, useState} from \"react\";\r\nimport {Button} from \"../button/button\";\r\n\r\ntype SettingsType = {\r\n    title: string\r\n    statusStartValue: (value: number) => void\r\n    statusMaxValue: (value: number) => void\r\n    setDisabled: (event: boolean) => void\r\n    BooleanForSetButton: boolean\r\n    setCount: (Dispatch<SetStateAction<number>>)\r\n    setStepValue: (event: number) => void\r\n}\r\n\r\n\r\nexport const Settings: React.FunctionComponent<SettingsType> = (props: SettingsType) => {\r\n\r\n\r\n    let [startValue, setStartValue] = useState<number>(0)\r\n    let [maxValue, setMaxValue] = useState<number>(0)\r\n    let [step, setStep] = useState<number>(1)\r\n\r\n    const onChangeValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let newStartValue = parseInt(event.currentTarget.value);\r\n        setStartValue(newStartValue);\r\n        props.statusStartValue(newStartValue);\r\n    };\r\n    const onChangeMaxValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let newMaxValue = parseInt(event.currentTarget.value);\r\n        props.statusMaxValue(newMaxValue);\r\n        setMaxValue(newMaxValue)\r\n    };\r\n    const onChangeValueStep = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let newSteptValue = parseInt(event.currentTarget.value);\r\n        props.setStepValue(newSteptValue)\r\n        setStep(newSteptValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const initialStartValue = Number(localStorage.getItem(\"startValue\"))\r\n        setStartValue(initialStartValue)\r\n        const initialMaxtValue = Number(localStorage.getItem(\"maxValue\"))\r\n        setMaxValue(initialMaxtValue)\r\n        const initialSteptValue = Number(localStorage.getItem(\"step\"))\r\n        setStep(initialSteptValue)\r\n        props.statusStartValue(initialStartValue);\r\n        props.statusMaxValue(initialMaxtValue);\r\n        props.setStepValue(initialSteptValue)\r\n        props.setDisabled(false)\r\n        props.setCount(initialStartValue)\r\n\r\n    }, []);\r\n\r\n    const onSetEvent = () => {\r\n\r\n        localStorage.setItem(\"startValue\", JSON.stringify(startValue))\r\n        localStorage.setItem(\"maxValue\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"step\", JSON.stringify(step))\r\n\r\n        props.setDisabled(false)\r\n        props.setCount(startValue)\r\n\r\n    };\r\n\r\n    let container = {\r\n        border: \"2px solid yellow\",\r\n        borderRadius: \"20px\",\r\n    }\r\n    let buttonStyle = {\r\n        width: \"500px\",\r\n        height: \"100px\",\r\n        backgroundColor: \"grey\",\r\n        borderRadius: \"20px\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\",\r\n        margin: \"10px\",\r\n        border: \"3px solid green\",\r\n        fontSize: \"3vh\",\r\n\r\n    }\r\n    let inputStyle = {\r\n        height: \"4vh\",\r\n        width: \"50px\",\r\n        borderRadius: \"10px\",\r\n        backgroundColor: \"green\",\r\n        marginLeft: \"20px\",\r\n        fontSize: \"3vh\",\r\n    }\r\n    let inputStyleStep = {\r\n        height: \"4vh\",\r\n        width: \"50px\",\r\n        borderRadius: \"10px\",\r\n        backgroundColor: \"yellow\",\r\n        marginLeft: \"20px\",\r\n        fontSize: \"3vh\",\r\n    }\r\n    let inputStyleMinus = {\r\n        height: \"4vh\",\r\n        width: \"50px\",\r\n        borderRadius: \"10px\",\r\n        backgroundColor: \"red\",\r\n        marginLeft: \"20px\",\r\n        fontSize: \"3vh\",\r\n    }\r\n\r\n    let BasicTernaryStyle = startValue < 0 ? inputStyleMinus\r\n        : startValue === maxValue ? inputStyleMinus\r\n            : startValue > maxValue ? inputStyleMinus\r\n                : inputStyle;\r\n\r\n    let DisabledButtonTernary = startValue < 0 ? true\r\n        : startValue === maxValue ? true\r\n            : startValue > maxValue ? true\r\n                : false;\r\n\r\n\r\n    return (\r\n        <div style={container}>\r\n            <div style={buttonStyle} onClick={() => props.setDisabled(true)}>\r\n                <form>\r\n                    max value:\r\n                    <input style={BasicTernaryStyle}\r\n                           type=\"number\"\r\n                           step={step}\r\n                           onChange={onChangeMaxValue}\r\n                           value={maxValue}\r\n                    />\r\n                </form>\r\n                <form>\r\n                    start value:\r\n                    <input style={BasicTernaryStyle}\r\n                           type=\"number\"\r\n                           onChange={onChangeValue}\r\n                           step={step}\r\n                           value={startValue}\r\n                    />\r\n                </form>\r\n                <form>\r\n                    step value:\r\n                    <input style={inputStyleStep}\r\n                           type=\"number\"\r\n                           onChange={onChangeValueStep}\r\n                           value={step}\r\n                           min={1}\r\n                    />\r\n                </form>\r\n            </div>\r\n            <div style={buttonStyle}>\r\n                <Button title={props.title} onClick={onSetEvent} disable={DisabledButtonTernary}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Button} from \"./components/button/button\";\nimport {Settings} from \"./components/settings/settings\";\n\n\nexport const App: React.FC = () => {\n\n    let [value, setValue] = useState<number>(0)\n    let [count, setCount] = useState<number>(0)\n    let [maxValue, setMaxValue] = useState<number>(0)\n    let [step, setStep] = useState<number>(1)\n    let [dis, setDis] = useState<boolean>(true)\n\n    const statusStartValue = (value: number) => {\n        setValue(value)\n    };\n    const statusMaxValue = (value: number) => {\n        setMaxValue(value)\n    };\n\n    const setDisabled = (event: boolean) => {\n        setDis(event)\n    };\n    const setStepValue = (event: number) => {\n        setStep(event)\n    };\n\n    let Max: number = maxValue\n\n\n    const upCount = () => {\n        if (count < maxValue) {\n            let newCount = count + step\n            setCount(newCount)\n        }\n    };\n\n    const switchSetCount = () => {\n        setCount(value)\n    };\n\n    let container = {\n        border: \"2px solid yellow\",\n        borderRadius: \"20px\",\n        marginLeft: \"20px\"\n    };\n    let buttonStyle = {\n        width: \"500px\",\n        height: \"100px\",\n        backgroundColor: \"grey\",\n        borderRadius: \"20px\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        margin: \"10px\",\n        border: \"3px solid green\",\n        fontSize: \"4vh\"\n\n    };\n    let buttonStyle_ = {\n        width: \"500px\",\n        height: \"100px\",\n        backgroundColor: \"rgba(219,110,85,0.9)\",\n        borderRadius: \"20px\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        margin: \"10px\",\n        border: \"3px solid green\",\n        fontSize: \"5vh\"\n\n    };\n    let IncorrectValue = {\n       color: \"red\"\n\n    };\n\n    let viewScore = value < 0 ? <div style={IncorrectValue}>Incorrect value</div>\n        : value === maxValue ? <div style={IncorrectValue}>Incorrect value</div>\n            : value > maxValue ? <div style={IncorrectValue}>Incorrect value</div>\n                :<div>enter value and press 'set'</div>;\n\n    let BasicView = dis ? viewScore\n                : count\n\n    let isDisabled = count === Max ? true\n        : dis ? true\n            : false\n\n    let Disabled = count === Max ? false : true;\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Settings\n                    title={\"set\"}\n                    // onClick={upCount}\n                    statusStartValue = {statusStartValue}\n                    statusMaxValue={statusMaxValue}\n                    setDisabled={setDisabled}\n                    BooleanForSetButton={dis}\n                    setCount={setCount}\n                    setStepValue={setStepValue}\n                    // switchSetCount={switchSetCount}\n                    // upCount={upCount}\n                />\n                <div style={container}>\n                    <div style={count === Max ? buttonStyle_ : buttonStyle }>{BasicView}</div>\n                    <div style={buttonStyle}>\n                        <Button title={\"inc\"}\n                                onClick={upCount}\n                                disable={isDisabled}\n                        />\n                        <Button title={\"reset\"}\n                                onClick={switchSetCount}\n                                disable={Disabled}\n                        />\n                    </div>\n                </div>\n            </header>\n        </div>\n    );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}